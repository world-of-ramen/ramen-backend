"""Typings for queries generated by aiosql"""

from typing import Optional

from asyncpg import Connection, Record

class StoresQueriesMixin:
    async def get_store_by_id(self, conn: Connection, *, id: int) -> Record: ...
    async def get_stores(self, conn: Connection, limit: int, offset: int) -> Record: ...
    async def get_store_list(
        self, conn: Connection, limit: int, offset: int
    ) -> Record: ...
    async def create_store(
        self,
        conn: Connection,
        *,
        name: str,
        phone: Optional[str],
        address: Optional[str],
        rating: Optional[float],
        review_count: Optional[int],
        image: Optional[str],
        social_media: Optional[str],
        business_hours: Optional[str],
        place_id: Optional[str],
        location: Optional[str],
        status: int,
    ) -> Record: ...
    async def update_store_by_id(
        self,
        conn: Connection,
        *,
        id: int,
        new_name: Optional[str],
        new_phone: Optional[str],
        new_address: Optional[str],
        new_rating: Optional[float],
        new_review_count: Optional[int],
        new_image: Optional[str],
        new_social_meida: Optional[str],
        new_business_hours: Optional[str],
        new_place_id: Optional[str],
        new_location: Optional[str],
        new_status: Optional[int],
    ) -> Record: ...

class UsersQueriesMixin:
    async def get_user_by_id(self, conn: Connection, *, id: int) -> Record: ...
    async def get_users(self, conn: Connection, limit: int, offset: int) -> Record: ...
    async def get_user_by_wallet_address(
        self, conn: Connection, *, wallet_address: str
    ) -> Record: ...
    async def get_wallet_address_by_user_id(
        self, conn: Connection, *, user_id: int
    ) -> Record: ...
    async def create_new_user(
        self, conn: Connection, *, wallet_address: str, image: str, status: int
    ) -> Record: ...
    async def update_user_by_id(
        self,
        conn: Connection,
        *,
        id: int,
        new_wallet_address: Optional[str],
        new_image: Optional[str],
        new_status: Optional[int],
    ) -> Record: ...

class NFTsQueriesMixin:
    async def get_nft_by_id(self, conn: Connection, *, id: int) -> Record: ...
    async def get_nfts_by_user_id(
        self, conn: Connection, *, user_id: int
    ) -> Record: ...
    async def get_nft(
        self,
        conn: Connection,
        *,
        user_id: int,
        wallet_address: str,
        token_address: str,
        token_id: int,
    ) -> Record: ...
    async def create_new_nft(
        self,
        conn: Connection,
        *,
        user_id: int,
        wallet_address: str,
        image_url: str,
        token_address: str,
        token_id: int,
        name: str,
        symbol: str,
    ) -> Record: ...
    async def update_nft_by_id(
        self,
        conn: Connection,
        *,
        id: int,
        new_image_url: Optional[str],
    ) -> Record: ...

class WhitelistContractsQueriesMixin:
    async def get_whitelist_contracts(self, conn: Connection) -> Record: ...

class ProfilesQueriesMixin:
    async def is_user_following_for_another(
        self, conn: Connection, *, follower_uid: str, following_uid: str
    ) -> Record: ...
    async def is_user_blocked_by_another(
        self, conn: Connection, *, uid: str, blocked_uid: str
    ) -> Record: ...
    async def subscribe_user_to_another(
        self, conn: Connection, *, follower_uid: str, following_uid: str
    ) -> None: ...
    async def unsubscribe_user_from_another(
        self, conn: Connection, *, follower_uid: str, following_uid: str
    ) -> None: ...
    async def block_user(
        self, conn: Connection, *, uid: str, blocked_uid: str
    ) -> None: ...
    async def unblock_user(
        self, conn: Connection, *, uid: str, blocked_uid: str
    ) -> None: ...
    async def get_user_following_count(
        self, conn: Connection, *, follower_uid: str
    ) -> Record: ...
    async def get_user_follower_count(
        self, conn: Connection, *, following_uid: str
    ) -> Record: ...
    async def get_user_plan_applied_count(
        self, conn: Connection, *, uid: str
    ) -> Record: ...

class PostsQueriesMixin:
    async def get_post_by_id(self, conn: Connection, *, id: int) -> Record: ...
    async def get_posts_by_store_id(
        self, conn: Connection, limit: int, offset: int, store_id: int
    ) -> Record: ...
    async def get_posts_by_user_id(
        self, conn: Connection, limit: int, offset: int, user_id: int
    ) -> Record: ...
    async def get_latest_posts(
        self, conn: Connection, limit: int, offset: int
    ) -> Record: ...
    async def create_post(
        self,
        conn: Connection,
        *,
        store_id: int,
        user_id: int,
        body: Optional[str],
        image_url: Optional[str],
        rating: Optional[float],
        status: int,
    ) -> Record: ...
    async def update_post_by_id(
        self,
        conn: Connection,
        *,
        id: int,
        new_body: Optional[str],
        new_image_url: Optional[str],
        new_rating: Optional[float],
        new_status: Optional[int],
    ) -> Record: ...

class CommentsQueriesMixin:
    async def get_comment_by_id(self, conn: Connection, *, id: int) -> Record: ...
    async def get_comments_by_post_id(
        self, conn: Connection, limit: int, offset: int, post_id: int
    ) -> Record: ...
    async def create_comment(
        self,
        conn: Connection,
        *,
        post_id: int,
        user_id: Optional[int],
        body: Optional[str],
        status: int,
    ) -> Record: ...
    async def update_comment_by_id(
        self,
        conn: Connection,
        *,
        id: int,
        new_body: Optional[str],
        new_status: Optional[int],
    ) -> Record: ...

class Queries(
    StoresQueriesMixin,
    UsersQueriesMixin,
    ProfilesQueriesMixin,
    NFTsQueriesMixin,
    PostsQueriesMixin,
    CommentsQueriesMixin,
    WhitelistContractsQueriesMixin,
): ...

queries: Queries
